Dataset: Digits
--------------------------------------------
Model Name: MVAE_Soft_Assignment_GMM_full_10_Digits
==================================================================
MVAE_Soft_Assignment_GMM_full_10_Digits Part:
==================================================================
Random Seed = 10
--------------------------------------------
Device = cuda:1
--------------------------------------------
Number of Epochs = 1500
--------------------------------------------
Learning Rate = 0.0001
--------------------------------------------
Step Size = 20
--------------------------------------------
Input Dimension = 64
--------------------------------------------
Encoder Hidden Dimension 1 = 256
--------------------------------------------
Encoder Hidden Dimension 2 = 256
--------------------------------------------
Latent Dimension = 10
--------------------------------------------
Decoder Hidden Layer 1 = 256
--------------------------------------------
Decoder Hidden Layer 2 = 256
--------------------------------------------
Output Dimension = 64
--------------------------------------------
Weight Decay = 1e-05
--------------------------------------------
Batch Size (Training) = 50
--------------------------------------------
Batch Size (Test) = 50
--------------------------------------------
gamma = 0.9
==================================================================

GMM Part:
==================================================================
Number of Components= 10
--------------------------------------------
Covariance Matrix= full
--------------------------------------------
Number of Iterations= 20
--------------------------------------------
Epsilon = 1e-20
--------------------------------------------
Precision = 28
==================================================================

Early Stopping:
--------------------------------------------
Maximum Patience = 1501
--------------------------------------------
Best Test Loss = inf
--------------------------------------------
Patience Counters = 0
==================================================================

Loss Functions:
==================================================================
Decoder Loss (Training) = tensor([[-25.8612, -17.8382, -24.7171, -19.6066, -35.0631, -36.1830, -33.2744,
         -19.2262, -42.4210, -26.3666],
        [-18.0089, -28.0598, -26.8651, -23.7445, -23.6038, -20.3693, -18.6223,
         -14.0614, -23.2410, -10.7078],
        [-20.9543, -20.1904, -21.1202, -19.4928, -36.7027, -23.3758, -20.0918,
         -24.7081, -29.4536, -24.9191],
        [-28.7589, -29.6851, -28.5462, -35.4709, -36.7866, -30.4142, -29.5866,
         -29.2953, -35.2841, -28.9295],
        [-27.5316, -22.5592, -31.9381, -31.9812, -28.3976, -23.6616, -24.3528,
         -21.6297, -22.6763, -29.3088],
        [-27.5139, -23.0858, -24.0480, -24.5793, -33.2137, -27.2913, -24.8473,
         -24.9084, -26.0975, -28.3647],
        [-31.5548, -24.8299, -35.9645, -31.8384, -28.7987, -31.3358, -33.1295,
         -31.9014, -19.3061, -32.1886],
        [-20.1921, -24.9452, -22.5232, -27.8528, -23.8763, -19.1628, -21.4336,
         -32.6973, -20.9310, -17.6403],
        [-29.0254, -27.1218, -38.5259, -31.4761, -26.3703, -30.8584, -28.4452,
         -28.9836, -25.5498, -35.0441],
        [-32.5712, -21.9221, -22.9879, -23.4532, -25.1650, -22.3304, -21.9374,
         -24.8035, -28.3963, -25.5420],
        [-24.1268, -27.9985, -27.6725, -24.1080, -38.6088, -27.5671, -25.4206,
         -27.4102, -27.8279, -27.1402],
        [-29.5888, -24.4855, -24.3950, -23.7545, -38.3514, -48.4365, -27.3561,
         -27.3975, -31.4636, -28.4807],
        [-27.4003, -25.7454, -25.0991, -27.8693, -31.9477, -33.9992, -25.4354,
         -24.1606, -25.9829, -29.1822],
        [-28.1543, -30.7759, -34.8692, -28.0573, -35.5022, -38.3144, -33.2928,
         -34.8688, -37.0268, -27.4941],
        [-27.1935, -27.9216, -26.7832, -37.3284, -17.3133, -20.9127, -25.4355,
         -26.2940, -22.3628, -33.3326],
        [-37.5253, -23.0471, -33.0138, -34.6102, -22.4980, -22.9804, -28.7042,
         -31.1691, -19.9004, -28.2222],
        [-26.8754, -25.9556, -44.4362, -35.5624, -23.1040, -23.5115, -32.4036,
         -26.3644, -29.4965, -33.2676],
        [-26.4781, -19.1099, -49.4947, -35.3266, -22.1789, -20.0806, -27.8433,
         -19.4788, -25.0294, -26.3834],
        [-30.2164, -31.8940, -43.7756, -30.4769, -37.3081, -40.9077, -39.5743,
         -29.4255, -50.3939, -20.7635],
        [-29.3853, -25.5227, -38.8518, -39.4104, -17.1207, -28.6226, -30.8235,
         -23.0357, -32.7054, -34.8733],
        [-16.9688, -32.6430, -30.7088, -28.2652, -25.8769, -14.4642, -15.0685,
         -34.1411, -36.9440, -17.4005],
        [-37.7629, -21.1531, -30.8646, -33.5228, -24.8429, -23.8680, -33.0830,
         -25.7607, -27.2136, -39.9469],
        [-32.8831, -22.8312, -33.5853, -37.4828, -25.3956, -28.3638, -30.7163,
         -36.8216, -21.9202, -23.7178],
        [-26.1395, -30.9904, -21.8585, -20.7473, -31.5712, -20.8744, -21.7539,
         -21.0070, -25.9835, -32.9691],
        [-32.0034, -28.7369, -40.6417, -25.2815, -30.7129, -30.6027, -31.2863,
         -33.3281, -31.1624, -29.0242],
        [-31.6928, -23.5613, -32.4511, -31.3238, -26.7076, -42.0523, -27.1918,
         -35.4010, -24.6454, -39.4578],
        [-21.3290, -29.0158, -26.7174, -18.8693, -43.7628, -39.9257, -26.9228,
         -22.1975, -38.0393, -35.0210]], device='cuda:1',
       grad_fn=<SumBackward1>)
=============================================================================================
Encoder Loss (Training) = Normal(loc: torch.Size([27, 10, 10]), scale: torch.Size([27, 10, 10]))
=============================================================================================
Decoder Loss (Test) = tensor([[-26.6678, -25.8075, -32.8617, -34.2973, -20.0088, -22.9945, -27.7063,
         -31.5062, -27.2311, -35.1796],
        [-34.8725, -29.1069, -49.1145, -46.5495, -24.9738, -28.5511, -36.2180,
         -36.1759, -31.0569, -48.5887],
        [-22.4655, -27.1885, -18.1522, -22.1109, -31.5257, -25.2838, -26.3555,
         -27.8487, -29.1116, -28.7347],
        [-21.3346, -33.8072, -28.3879, -24.0076, -41.6180, -34.0692, -29.6013,
         -26.7547, -39.2363, -20.1766],
        [-24.2635, -27.1720, -30.1401, -25.6871, -33.9490, -26.6268, -27.1842,
         -24.7778, -30.9356, -25.5430],
        [-19.3958, -32.4211, -27.6578, -24.4495, -41.0688, -32.5716, -29.5950,
         -23.2157, -34.2340, -17.8470],
        [-21.1662, -29.6446, -26.1127, -24.2394, -35.5926, -29.3984, -28.8195,
         -24.2109, -32.4262, -20.5433],
        [-23.3889, -23.3953, -23.5167, -22.4942, -25.0676, -22.7325, -23.3739,
         -22.0105, -31.1028, -28.5313],
        [-25.6383, -29.8828, -18.4159, -26.5066, -31.5953, -26.6038, -28.1600,
         -33.2195, -33.8485, -29.4544],
        [-22.1201, -23.5827, -21.9387, -21.8560, -26.0855, -20.9065, -21.2491,
         -24.4083, -29.8454, -26.1628],
        [-24.8946, -22.5334, -22.8721, -22.2841, -24.7249, -22.7855, -23.8681,
         -22.3469, -30.3306, -30.3740],
        [-27.3499, -24.3706, -37.2416, -37.1155, -19.2379, -21.5115, -28.3588,
         -30.6486, -25.3170, -38.7783],
        [-20.4538, -28.5965, -27.7671, -23.5695, -34.6382, -24.2610, -21.7881,
         -22.1818, -30.2695, -20.7196],
        [-21.0460, -28.4426, -25.8600, -23.8228, -32.1866, -25.7017, -21.2430,
         -22.3903, -28.6614, -20.3162],
        [-26.6456, -20.8031, -33.5094, -33.1583, -16.8121, -19.7587, -26.8820,
         -26.2595, -22.1269, -36.4893],
        [-21.9183, -21.6414, -21.0897, -20.9230, -22.4690, -19.1127, -19.7706,
         -22.0545, -28.9164, -27.6046],
        [-30.7396, -20.7440, -33.8892, -31.8507, -24.8774, -24.4525, -30.2077,
         -28.8431, -20.4009, -36.0962],
        [-20.2051, -24.5585, -28.7982, -24.8744, -27.0599, -22.3854, -20.4409,
         -20.4091, -23.7355, -21.3324],
        [-23.3855, -24.5757, -24.3820, -24.4757, -24.2675, -21.3844, -22.1740,
         -23.3767, -30.2286, -27.2525],
        [-27.0708, -28.9718, -30.3057, -30.0650, -33.9380, -27.8742, -29.0561,
         -27.2568, -31.2207, -29.9387]], device='cuda:1')
=============================================================================================
Encoder Loss (Test) = Normal(loc: torch.Size([20, 10, 10]), scale: torch.Size([20, 10, 10]))
=============================================================================================
